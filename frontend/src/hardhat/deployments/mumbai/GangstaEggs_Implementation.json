{
  "address": "0x3E7121edD3379Ad4F74Af7088bE5D00f1e9a2278",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "ipfsCid",
          "type": "string"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ipfsCid",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseTokenURI",
          "type": "string"
        }
      ],
      "name": "setBaseTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setGangstaChicks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMintingPrice",
          "type": "uint256"
        }
      ],
      "name": "setMintingPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "ipfsCid",
                  "type": "string"
                }
              ],
              "internalType": "struct Mintable.TokenMetadatum",
              "name": "metadata",
              "type": "tuple"
            }
          ],
          "internalType": "struct Mintable.Token",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x372ed08693d5ec8a2b9e976f5b205e06c2803d76c8d8cf6ef633251faed1b81c",
  "receipt": {
    "to": null,
    "from": "0xFBBe21D4961d52995507eEdFFAd0d269555C6A1e",
    "contractAddress": "0x3E7121edD3379Ad4F74Af7088bE5D00f1e9a2278",
    "transactionIndex": 0,
    "gasUsed": "4184308",
    "logsBloom": "0x00000004000000000000000000000000000000000000000000000200000000000000000000000000000000000000004000018020000000000000000000000000000000000000000000000c00000000800000000000000000000100000000000000000000020000002000000000000800000000000000000080000000001000000000000000000000040000000000008000000000000000000000000000000000200000000000000000000000000000000000000000000000001000000000024000000000000000000001000000000000001000000000000100102000000020000000000000000000000000000000000000200400000000000000000000100000",
    "blockHash": "0x2a3c6c12f4c5ceb7abf350950e6f0c96580b3cff2e6353b525b578a88f450fda",
    "transactionHash": "0x372ed08693d5ec8a2b9e976f5b205e06c2803d76c8d8cf6ef633251faed1b81c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 21129678,
        "transactionHash": "0x372ed08693d5ec8a2b9e976f5b205e06c2803d76c8d8cf6ef633251faed1b81c",
        "address": "0x3E7121edD3379Ad4F74Af7088bE5D00f1e9a2278",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fbbe21d4961d52995507eedffad0d269555c6a1e",
          "0x000000000000000000000000fbbe21d4961d52995507eedffad0d269555c6a1e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2a3c6c12f4c5ceb7abf350950e6f0c96580b3cff2e6353b525b578a88f450fda"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 21129678,
        "transactionHash": "0x372ed08693d5ec8a2b9e976f5b205e06c2803d76c8d8cf6ef633251faed1b81c",
        "address": "0x3E7121edD3379Ad4F74Af7088bE5D00f1e9a2278",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x000000000000000000000000fbbe21d4961d52995507eedffad0d269555c6a1e",
          "0x000000000000000000000000fbbe21d4961d52995507eedffad0d269555c6a1e"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x2a3c6c12f4c5ceb7abf350950e6f0c96580b3cff2e6353b525b578a88f450fda"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 21129678,
        "transactionHash": "0x372ed08693d5ec8a2b9e976f5b205e06c2803d76c8d8cf6ef633251faed1b81c",
        "address": "0x3E7121edD3379Ad4F74Af7088bE5D00f1e9a2278",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x000000000000000000000000fbbe21d4961d52995507eedffad0d269555c6a1e",
          "0x000000000000000000000000fbbe21d4961d52995507eedffad0d269555c6a1e"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x2a3c6c12f4c5ceb7abf350950e6f0c96580b3cff2e6353b525b578a88f450fda"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 21129678,
        "transactionHash": "0x372ed08693d5ec8a2b9e976f5b205e06c2803d76c8d8cf6ef633251faed1b81c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fbbe21d4961d52995507eedffad0d269555c6a1e",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001382db99f6328000000000000000000000000000000000000000000000000001c189cf27d75b70000000000000000000000000000000000000000000000000000bfcfabb8e35a000000000000000000000000000000000000000000000000001ae06f38de128f0000000000000000000000000000000000000000000000000001f7fd6558468200",
        "logIndex": 3,
        "blockHash": "0x2a3c6c12f4c5ceb7abf350950e6f0c96580b3cff2e6353b525b578a88f450fda"
      }
    ],
    "blockNumber": 21129678,
    "cumulativeGasUsed": "4184308",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1c25a58d76d344be7f5a2a93e1745bb4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ipfsCid\",\"type\":\"string\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ipfsCid\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseTokenURI\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGangstaChicks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMintingPrice\",\"type\":\"uint256\"}],\"name\":\"setMintingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"ipfsCid\",\"type\":\"string\"}],\"internalType\":\"struct Mintable.TokenMetadatum\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"internalType\":\"struct Mintable.Token\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GangstaEggs.sol\":\"GangstaEggs\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xaf583f9537cf446d08c33909e52313d349a831f6b88f20361b76474e40b4c36f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/GangstaChicks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./Mintable.sol\\\";\\nimport \\\"./IGangstaChicks.sol\\\";\\n\\ncontract GangstaChicks is Mintable, IGangstaChicks {\\n    constructor() ERC721(\\\"GangstaChicks\\\", \\\"GCHK\\\") {}\\n\\n    function airdrop(address to, string memory ipfsCid) public onlyRole(MINTER_ROLE) {\\n        _mintWithIpfsCid(to, ipfsCid);\\n    }\\n\\n    function mintChickFromEgg(address _to, string calldata _ipfsCid) external override returns (bool) {\\n        _mintWithIpfsCid(_to, _ipfsCid);\\n        return true;\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(Mintable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IGangstaChicks).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xedb7a9b136d18fcea15d60e98b236e18b405839cc114ce832ec27b184d27e4b0\",\"license\":\"MIT\"},\"contracts/GangstaEggs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"./Mintable.sol\\\";\\nimport \\\"./GangstaChicks.sol\\\";\\nimport \\\"./IGangstaChicks.sol\\\";\\n\\ncontract GangstaEggs is Mintable {\\n    using ERC165Checker for address;\\n    GangstaChicks private gangstaChicks;\\n\\n    constructor() ERC721(\\\"GangstaEggs\\\", \\\"GEGG\\\") {}\\n\\n    function airdrop(address to, string memory ipfsCid) public onlyRole(MINTER_ROLE) {\\n        _mintWithIpfsCid(to, ipfsCid);\\n    }\\n\\n    function mint(string memory ipfsCid) public payable {\\n        require(msg.value >= _mintingPrice, \\\"Minting price is higher than provided payment\\\");\\n        _mintWithIpfsCid(_msgSender(), ipfsCid);\\n    }\\n\\n    function setGangstaChicks(address _address) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_address != address(0), \\\"GangstaChicks address cannot be 0x0\\\");\\n        require(_address.supportsInterface(type(IGangstaChicks).interfaceId), \\\"GangstaChicks address does not support IGangstaChicks interface\\\");\\n        gangstaChicks = GangstaChicks(_address);\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(Mintable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x08c297692f942eba315aba040a3e6fb62007b0b291dbe170c28112f422cb4f96\",\"license\":\"MIT\"},\"contracts/IGangstaChicks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IGangstaChicks {\\n    function mintChickFromEgg(address _to, string calldata _ipfsCid) external returns (bool);\\n}\\n\",\"keccak256\":\"0xb62b926b142b3abac1602f2a85d3c8a270df16a7f54bbaa0ab9bfc726ed11db1\",\"license\":\"MIT\"},\"contracts/Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./RoleBasedAccess.sol\\\";\\nimport \\\"./PriceReference.sol\\\";\\nimport \\\"./WithPause.sol\\\";\\n\\nabstract contract Mintable is WithPause, PriceReference {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _tokenIdCounter;\\n\\n    struct TokenMetadatum {\\n        string ipfsCid;\\n    }\\n\\n    struct Token {\\n        uint256 id;\\n        address owner;\\n        TokenMetadatum metadata;\\n    }\\n\\n    mapping(uint256 => TokenMetadatum) private _tokenMetadata;\\n\\n    function tokenMetadata(uint256 _tokenId) public view returns (Token memory) {\\n        require(_msgSender() == ownerOf(_tokenId), \\\"Only owner can access token metadata\\\");\\n        return Token(\\n            _tokenId,\\n            ownerOf(_tokenId),\\n            _tokenMetadata[_tokenId]\\n        );\\n    }\\n\\n    function _mintWithIpfsCid(address to, string memory ipfsCid) internal  {\\n        require(bytes(ipfsCid).length > 0, \\\"IPFS CID must not be empty\\\");\\n\\n        uint256 tokenId = _tokenIdCounter.current();\\n        require(bytes(_tokenMetadata[tokenId].ipfsCid).length == 0, \\\"Token already has an IPFS CID\\\");\\n\\n        _safeMint(to, tokenId);\\n        _tokenMetadata[tokenId] = TokenMetadatum(ipfsCid);\\n        _tokenIdCounter.increment();\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(WithPause, RoleBasedAccess)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x00926c51f56a8bd6ac206be69bb0cda42d74d1fb4466af66cefc744204d7cfe1\",\"license\":\"MIT\"},\"contracts/PriceReference.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./RoleBasedAccess.sol\\\";\\n\\ncontract PriceReference is RoleBasedAccess {\\n    uint256 internal _mintingPrice;\\n\\n    constructor() {\\n        _mintingPrice = 0.04 ether;\\n    }\\n\\n    function setMintingPrice(uint256 _newMintingPrice) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_newMintingPrice > 0, \\\"Minting price must be greater than 0\\\");\\n        _mintingPrice = _newMintingPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xb57a3b5bfbfe3dd4495c24de4abd874aa91184cc13e4bfdd76a8652923e588df\",\"license\":\"MIT\"},\"contracts/RoleBasedAccess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract RoleBasedAccess is AccessControl {\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    constructor () {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(PAUSER_ROLE, msg.sender);\\n        _setupRole(MINTER_ROLE, msg.sender);\\n    }\\n\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x9e0f3a84a8f1b730b27f089a7989212ee37fc6bfc3aed693d078b870f4b4a6cf\",\"license\":\"MIT\"},\"contracts/TokenBaseUriReference.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"./RoleBasedAccess.sol\\\";\\n\\nabstract contract TokenBaseUriReference is ERC721, RoleBasedAccess {\\n    string private _baseTokenURI;\\n\\n    function _baseURI() internal view override(ERC721) returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function setBaseTokenURI(string memory _newBaseTokenURI) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(bytes(_newBaseTokenURI).length > 0, \\\"Base token URI must not be empty\\\");\\n        _baseTokenURI = _newBaseTokenURI;\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721, RoleBasedAccess)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x7cbc2c83286eba0776ad6b8474c12d71eaa6c3c40dc5543c757184e4b48a85a0\",\"license\":\"MIT\"},\"contracts/WithPause.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"./TokenBaseUriReference.sol\\\";\\n\\nabstract contract WithPause is Pausable, TokenBaseUriReference {\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\\n        internal\\n        whenNotPaused\\n        override\\n    {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(TokenBaseUriReference)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x823e5c660ce1aee42e37b482989b1f1f21137fb83d43b08d1dd8efcae63a6359\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600b81526020017f47616e67737461456767730000000000000000000000000000000000000000008152506040518060400160405280600481526020017f474547470000000000000000000000000000000000000000000000000000000081525060008060006101000a81548160ff0219169083151502179055508160019080519060200190620000b0929190620002d4565b508060029080519060200190620000c9929190620002d4565b505050620000e16000801b336200015960201b60201c565b620001137f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336200015960201b60201c565b620001457f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6336200015960201b60201c565b668e1bc9bf040000600981905550620003e9565b6200016b82826200016f60201b60201c565b5050565b6200018182826200026160201b60201c565b6200025d5760016007600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555062000202620002cc60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006007600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b828054620002e29062000384565b90600052602060002090601f01602090048101928262000306576000855562000352565b82601f106200032157805160ff191683800117855562000352565b8280016001018555821562000352579182015b828111156200035157825182559160200191906001019062000334565b5b50905062000361919062000365565b5090565b5b808211156200038057600081600090555060010162000366565b5090565b600060028204905060018216806200039d57607f821691505b60208210811415620003b457620003b3620003ba565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b61484080620003f96000396000f3fe6080604052600436106101cd5760003560e01c806370a08231116100f7578063b88d4fde11610095578063d547741f11610064578063d547741f14610682578063d85d3d27146106ab578063e63ab1e9146106c7578063e985e9c5146106f2576101cd565b8063b88d4fde146105c8578063c87b56dd146105f1578063ce196aea1461062e578063d539139314610657576101cd565b806391d14854116100d157806391d148541461050c57806395d89b4114610549578063a217fddf14610574578063a22cb4651461059f576101cd565b806370a082311461048f5780638417b47f146104cc5780638456cb59146104f5576101cd565b806330176e131161016f5780635c975abb1161013e5780635c975abb146103c15780635e473128146103ec5780636352211e146104155780636914db6014610452576101cd565b806330176e131461032f57806336568abe146103585780633f4ba83a1461038157806342842e0e14610398576101cd565b8063095ea7b3116101ab578063095ea7b31461027757806323b872dd146102a0578063248a9ca3146102c95780632f2ff15d14610306576101cd565b806301ffc9a7146101d257806306fdde031461020f578063081812fc1461023a575b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f49190613063565b61072f565b60405161020691906137d3565b60405180910390f35b34801561021b57600080fd5b50610224610741565b6040516102319190613824565b60405180910390f35b34801561024657600080fd5b50610261600480360381019061025c9190613106565b6107d3565b60405161026e919061376c565b60405180910390f35b34801561028357600080fd5b5061029e60048036038101906102999190612f89565b610858565b005b3480156102ac57600080fd5b506102c760048036038101906102c29190612e17565b610970565b005b3480156102d557600080fd5b506102f060048036038101906102eb9190612ff6565b6109d0565b6040516102fd91906137ee565b60405180910390f35b34801561031257600080fd5b5061032d60048036038101906103289190613023565b6109f0565b005b34801561033b57600080fd5b50610356600480360381019061035191906130bd565b610a19565b005b34801561036457600080fd5b5061037f600480360381019061037a9190613023565b610a8d565b005b34801561038d57600080fd5b50610396610b10565b005b3480156103a457600080fd5b506103bf60048036038101906103ba9190612e17565b610b4d565b005b3480156103cd57600080fd5b506103d6610b6d565b6040516103e391906137d3565b60405180910390f35b3480156103f857600080fd5b50610413600480360381019061040e9190612f2d565b610b83565b005b34801561042157600080fd5b5061043c60048036038101906104379190613106565b610bc4565b604051610449919061376c565b60405180910390f35b34801561045e57600080fd5b5061047960048036038101906104749190613106565b610c76565b6040516104869190613b86565b60405180910390f35b34801561049b57600080fd5b506104b660048036038101906104b19190612daa565b610dea565b6040516104c39190613ba8565b60405180910390f35b3480156104d857600080fd5b506104f360048036038101906104ee9190613106565b610ea2565b005b34801561050157600080fd5b5061050a610f05565b005b34801561051857600080fd5b50610533600480360381019061052e9190613023565b610f42565b60405161054091906137d3565b60405180910390f35b34801561055557600080fd5b5061055e610fad565b60405161056b9190613824565b60405180910390f35b34801561058057600080fd5b5061058961103f565b60405161059691906137ee565b60405180910390f35b3480156105ab57600080fd5b506105c660048036038101906105c19190612eed565b611046565b005b3480156105d457600080fd5b506105ef60048036038101906105ea9190612e6a565b6111c7565b005b3480156105fd57600080fd5b5061061860048036038101906106139190613106565b611229565b6040516106259190613824565b60405180910390f35b34801561063a57600080fd5b5061065560048036038101906106509190612daa565b6112d0565b005b34801561066357600080fd5b5061066c611422565b60405161067991906137ee565b60405180910390f35b34801561068e57600080fd5b506106a960048036038101906106a49190613023565b611446565b005b6106c560048036038101906106c091906130bd565b61146f565b005b3480156106d357600080fd5b506106dc6114c8565b6040516106e991906137ee565b60405180910390f35b3480156106fe57600080fd5b5061071960048036038101906107149190612dd7565b6114ec565b60405161072691906137d3565b60405180910390f35b600061073a82611580565b9050919050565b60606001805461075090613ea8565b80601f016020809104026020016040519081016040528092919081815260200182805461077c90613ea8565b80156107c95780601f1061079e576101008083540402835291602001916107c9565b820191906000526020600020905b8154815290600101906020018083116107ac57829003601f168201915b5050505050905090565b60006107de82611592565b61081d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081490613aa6565b60405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061086382610bc4565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cb90613b26565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108f36115fe565b73ffffffffffffffffffffffffffffffffffffffff16148061092257506109218161091c6115fe565b6114ec565b5b610961576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610958906139e6565b60405180910390fd5b61096b8383611606565b505050565b61098161097b6115fe565b826116bf565b6109c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b790613b46565b60405180910390fd5b6109cb83838361179d565b505050565b600060076000838152602001908152602001600020600101549050919050565b6109f9826109d0565b610a0a81610a056115fe565b6119f9565b610a148383611a96565b505050565b6000801b610a2e81610a296115fe565b6119f9565b6000825111610a72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6990613a66565b60405180910390fd5b8160089080519060200190610a88929190612b44565b505050565b610a956115fe565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af990613b66565b60405180910390fd5b610b0c8282611b77565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610b4281610b3d6115fe565b6119f9565b610b4a611c59565b50565b610b68838383604051806020016040528060008152506111c7565b505050565b60008060009054906101000a900460ff16905090565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610bb581610bb06115fe565b6119f9565b610bbf8383611cfa565b505050565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6490613a26565b60405180910390fd5b80915050919050565b610c7e612bca565b610c8782610bc4565b73ffffffffffffffffffffffffffffffffffffffff16610ca56115fe565b73ffffffffffffffffffffffffffffffffffffffff1614610cfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf290613966565b60405180910390fd5b6040518060600160405280838152602001610d1584610bc4565b73ffffffffffffffffffffffffffffffffffffffff168152602001600b6000858152602001908152602001600020604051806020016040529081600082018054610d5e90613ea8565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8a90613ea8565b8015610dd75780601f10610dac57610100808354040283529160200191610dd7565b820191906000526020600020905b815481529060010190602001808311610dba57829003601f168201915b5050505050815250508152509050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5290613a06565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000801b610eb781610eb26115fe565b6119f9565b60008211610efa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef190613a46565b60405180910390fd5b816009819055505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610f3781610f326115fe565b6119f9565b610f3f611e0c565b50565b60006007600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b606060028054610fbc90613ea8565b80601f0160208091040260200160405190810160405280929190818152602001828054610fe890613ea8565b80156110355780601f1061100a57610100808354040283529160200191611035565b820191906000526020600020905b81548152906001019060200180831161101857829003601f168201915b5050505050905090565b6000801b81565b61104e6115fe565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b390613946565b60405180910390fd5b80600660006110c96115fe565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166111766115fe565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516111bb91906137d3565b60405180910390a35050565b6111d86111d26115fe565b836116bf565b611217576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120e90613b46565b60405180910390fd5b61122384848484611eae565b50505050565b606061123482611592565b611273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126a90613b06565b60405180910390fd5b600061127d611f0a565b9050600081511161129d57604051806020016040528060008152506112c8565b806112a784611f9c565b6040516020016112b892919061370e565b6040516020818303038152906040525b915050919050565b6000801b6112e5816112e06115fe565b6119f9565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611355576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134c90613886565b60405180910390fd5b61139e7f06786aaf000000000000000000000000000000000000000000000000000000008373ffffffffffffffffffffffffffffffffffffffff166120fd90919063ffffffff16565b6113dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d4906139c6565b60405180910390fd5b81600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61144f826109d0565b6114608161145b6115fe565b6119f9565b61146a8383611b77565b505050565b6009543410156114b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ab90613ac6565b60405180910390fd5b6114c56114bf6115fe565b82611cfa565b50565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600061158b82612122565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661167983610bc4565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006116ca82611592565b611709576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170090613986565b60405180910390fd5b600061171483610bc4565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061178357508373ffffffffffffffffffffffffffffffffffffffff1661176b846107d3565b73ffffffffffffffffffffffffffffffffffffffff16145b80611794575061179381856114ec565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166117bd82610bc4565b73ffffffffffffffffffffffffffffffffffffffff1614611813576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180a90613ae6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187a90613926565b60405180910390fd5b61188e838383612134565b611899600082611606565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118e99190613d8a565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119409190613ca9565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b611a038282610f42565b611a9257611a288173ffffffffffffffffffffffffffffffffffffffff16601461218c565b611a368360001c602061218c565b604051602001611a47929190613732565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a899190613824565b60405180910390fd5b5050565b611aa08282610f42565b611b735760016007600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611b186115fe565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611b818282610f42565b15611c555760006007600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611bfa6115fe565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b611c61610b6d565b611ca0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9790613866565b60405180910390fd5b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611ce36115fe565b604051611cf0919061376c565b60405180910390a1565b6000815111611d3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d35906138e6565b60405180910390fd5b6000611d4a600a6123c8565b90506000600b60008381526020019081526020016000206000018054611d6f90613ea8565b905014611db1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da890613906565b60405180910390fd5b611dbb83826123d6565b604051806020016040528083815250600b60008381526020019081526020016000206000820151816000019080519060200190611df9929190612b44565b50905050611e07600a6123f4565b505050565b611e14610b6d565b15611e54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4b906139a6565b60405180910390fd5b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611e976115fe565b604051611ea4919061376c565b60405180910390a1565b611eb984848461179d565b611ec58484848461240a565b611f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611efb906138a6565b60405180910390fd5b50505050565b606060088054611f1990613ea8565b80601f0160208091040260200160405190810160405280929190818152602001828054611f4590613ea8565b8015611f925780601f10611f6757610100808354040283529160200191611f92565b820191906000526020600020905b815481529060010190602001808311611f7557829003601f168201915b5050505050905090565b60606000821415611fe4576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506120f8565b600082905060005b60008214612016578080611fff90613f0b565b915050600a8261200f9190613cff565b9150611fec565b60008167ffffffffffffffff81111561203257612031614041565b5b6040519080825280601f01601f1916602001820160405280156120645781602001600182028036833780820191505090505b5090505b600085146120f15760018261207d9190613d8a565b9150600a8561208c9190613f54565b60306120989190613ca9565b60f81b8183815181106120ae576120ad614012565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856120ea9190613cff565b9450612068565b8093505050505b919050565b6000612108836125a1565b801561211a575061211983836125ee565b5b905092915050565b600061212d82612719565b9050919050565b61213c610b6d565b1561217c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612173906139a6565b60405180910390fd5b61218783838361272b565b505050565b60606000600283600261219f9190613d30565b6121a99190613ca9565b67ffffffffffffffff8111156121c2576121c1614041565b5b6040519080825280601f01601f1916602001820160405280156121f45781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061222c5761222b614012565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106122905761228f614012565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026122d09190613d30565b6122da9190613ca9565b90505b600181111561237a577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061231c5761231b614012565b5b1a60f81b82828151811061233357612332614012565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061237390613e7e565b90506122dd565b50600084146123be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b590613846565b60405180910390fd5b8091505092915050565b600081600001549050919050565b6123f0828260405180602001604052806000815250612730565b5050565b6001816000016000828254019250508190555050565b600061242b8473ffffffffffffffffffffffffffffffffffffffff1661278b565b15612594578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026124546115fe565b8786866040518563ffffffff1660e01b81526004016124769493929190613787565b602060405180830381600087803b15801561249057600080fd5b505af19250505080156124c157506040513d601f19601f820116820180604052508101906124be9190613090565b60015b612544573d80600081146124f1576040519150601f19603f3d011682016040523d82523d6000602084013e6124f6565b606091505b5060008151141561253c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612533906138a6565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612599565b600190505b949350505050565b60006125cd827f01ffc9a7000000000000000000000000000000000000000000000000000000006125ee565b80156125e757506125e58263ffffffff60e01b6125ee565b155b9050919050565b6000806301ffc9a760e01b8360405160240161260a9190613809565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000808573ffffffffffffffffffffffffffffffffffffffff166175308460405161269491906136f7565b6000604051808303818686fa925050503d80600081146126d0576040519150601f19603f3d011682016040523d82523d6000602084013e6126d5565b606091505b50915091506020815110156126f05760009350505050612713565b81801561270d57508080602001905181019061270c9190612fc9565b5b93505050505b92915050565b60006127248261279e565b9050919050565b505050565b61273a83836127b0565b612747600084848461240a565b612786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161277d906138a6565b60405180910390fd5b505050565b600080823b905060008111915050919050565b60006127a98261297e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612820576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281790613a86565b60405180910390fd5b61282981611592565b15612869576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612860906138c6565b60405180910390fd5b61287560008383612134565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546128c59190613ca9565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806129f157506129f0826129f8565b5b9050919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612ac357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612ad35750612ad282612ada565b5b9050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b828054612b5090613ea8565b90600052602060002090601f016020900481019282612b725760008555612bb9565b82601f10612b8b57805160ff1916838001178555612bb9565b82800160010185558215612bb9579182015b82811115612bb8578251825591602001919060010190612b9d565b5b509050612bc69190612c07565b5090565b604051806060016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001612c01612c24565b81525090565b5b80821115612c20576000816000905550600101612c08565b5090565b6040518060200160405280606081525090565b6000612c4a612c4584613be8565b613bc3565b905082815260208101848484011115612c6657612c65614075565b5b612c71848285613e3c565b509392505050565b6000612c8c612c8784613c19565b613bc3565b905082815260208101848484011115612ca857612ca7614075565b5b612cb3848285613e3c565b509392505050565b600081359050612cca81614797565b92915050565b600081359050612cdf816147ae565b92915050565b600081519050612cf4816147ae565b92915050565b600081359050612d09816147c5565b92915050565b600081359050612d1e816147dc565b92915050565b600081519050612d33816147dc565b92915050565b600082601f830112612d4e57612d4d614070565b5b8135612d5e848260208601612c37565b91505092915050565b600082601f830112612d7c57612d7b614070565b5b8135612d8c848260208601612c79565b91505092915050565b600081359050612da4816147f3565b92915050565b600060208284031215612dc057612dbf61407f565b5b6000612dce84828501612cbb565b91505092915050565b60008060408385031215612dee57612ded61407f565b5b6000612dfc85828601612cbb565b9250506020612e0d85828601612cbb565b9150509250929050565b600080600060608486031215612e3057612e2f61407f565b5b6000612e3e86828701612cbb565b9350506020612e4f86828701612cbb565b9250506040612e6086828701612d95565b9150509250925092565b60008060008060808587031215612e8457612e8361407f565b5b6000612e9287828801612cbb565b9450506020612ea387828801612cbb565b9350506040612eb487828801612d95565b925050606085013567ffffffffffffffff811115612ed557612ed461407a565b5b612ee187828801612d39565b91505092959194509250565b60008060408385031215612f0457612f0361407f565b5b6000612f1285828601612cbb565b9250506020612f2385828601612cd0565b9150509250929050565b60008060408385031215612f4457612f4361407f565b5b6000612f5285828601612cbb565b925050602083013567ffffffffffffffff811115612f7357612f7261407a565b5b612f7f85828601612d67565b9150509250929050565b60008060408385031215612fa057612f9f61407f565b5b6000612fae85828601612cbb565b9250506020612fbf85828601612d95565b9150509250929050565b600060208284031215612fdf57612fde61407f565b5b6000612fed84828501612ce5565b91505092915050565b60006020828403121561300c5761300b61407f565b5b600061301a84828501612cfa565b91505092915050565b6000806040838503121561303a5761303961407f565b5b600061304885828601612cfa565b925050602061305985828601612cbb565b9150509250929050565b6000602082840312156130795761307861407f565b5b600061308784828501612d0f565b91505092915050565b6000602082840312156130a6576130a561407f565b5b60006130b484828501612d24565b91505092915050565b6000602082840312156130d3576130d261407f565b5b600082013567ffffffffffffffff8111156130f1576130f061407a565b5b6130fd84828501612d67565b91505092915050565b60006020828403121561311c5761311b61407f565b5b600061312a84828501612d95565b91505092915050565b61313c81613dbe565b82525050565b61314b81613dbe565b82525050565b61315a81613dd0565b82525050565b61316981613ddc565b82525050565b61317881613de6565b82525050565b600061318982613c4a565b6131938185613c60565b93506131a3818560208601613e4b565b6131ac81614084565b840191505092915050565b60006131c282613c4a565b6131cc8185613c71565b93506131dc818560208601613e4b565b80840191505092915050565b60006131f382613c55565b6131fd8185613c7c565b935061320d818560208601613e4b565b61321681614084565b840191505092915050565b600061322c82613c55565b6132368185613c8d565b9350613246818560208601613e4b565b61324f81614084565b840191505092915050565b600061326582613c55565b61326f8185613c9e565b935061327f818560208601613e4b565b80840191505092915050565b6000613298602083613c8d565b91506132a382614095565b602082019050919050565b60006132bb601483613c8d565b91506132c6826140be565b602082019050919050565b60006132de602383613c8d565b91506132e9826140e7565b604082019050919050565b6000613301603283613c8d565b915061330c82614136565b604082019050919050565b6000613324601c83613c8d565b915061332f82614185565b602082019050919050565b6000613347601a83613c8d565b9150613352826141ae565b602082019050919050565b600061336a601d83613c8d565b9150613375826141d7565b602082019050919050565b600061338d602483613c8d565b915061339882614200565b604082019050919050565b60006133b0601983613c8d565b91506133bb8261424f565b602082019050919050565b60006133d3602483613c8d565b91506133de82614278565b604082019050919050565b60006133f6602c83613c8d565b9150613401826142c7565b604082019050919050565b6000613419601083613c8d565b915061342482614316565b602082019050919050565b600061343c603f83613c8d565b91506134478261433f565b604082019050919050565b600061345f603883613c8d565b915061346a8261438e565b604082019050919050565b6000613482602a83613c8d565b915061348d826143dd565b604082019050919050565b60006134a5602983613c8d565b91506134b08261442c565b604082019050919050565b60006134c8602483613c8d565b91506134d38261447b565b604082019050919050565b60006134eb602083613c8d565b91506134f6826144ca565b602082019050919050565b600061350e602083613c8d565b9150613519826144f3565b602082019050919050565b6000613531602c83613c8d565b915061353c8261451c565b604082019050919050565b6000613554602d83613c8d565b915061355f8261456b565b604082019050919050565b6000613577602983613c8d565b9150613582826145ba565b604082019050919050565b600061359a602f83613c8d565b91506135a582614609565b604082019050919050565b60006135bd602183613c8d565b91506135c882614658565b604082019050919050565b60006135e0603183613c8d565b91506135eb826146a7565b604082019050919050565b6000613603601783613c9e565b915061360e826146f6565b601782019050919050565b6000613626601183613c9e565b91506136318261471f565b601182019050919050565b6000613649602f83613c8d565b915061365482614748565b604082019050919050565b6000602083016000830151848203600086015261367c82826131e8565b9150508091505092915050565b60006060830160008301516136a160008601826136d9565b5060208301516136b46020860182613133565b50604083015184820360408601526136cc828261365f565b9150508091505092915050565b6136e281613e32565b82525050565b6136f181613e32565b82525050565b600061370382846131b7565b915081905092915050565b600061371a828561325a565b9150613726828461325a565b91508190509392505050565b600061373d826135f6565b9150613749828561325a565b915061375482613619565b9150613760828461325a565b91508190509392505050565b60006020820190506137816000830184613142565b92915050565b600060808201905061379c6000830187613142565b6137a96020830186613142565b6137b660408301856136e8565b81810360608301526137c8818461317e565b905095945050505050565b60006020820190506137e86000830184613151565b92915050565b60006020820190506138036000830184613160565b92915050565b600060208201905061381e600083018461316f565b92915050565b6000602082019050818103600083015261383e8184613221565b905092915050565b6000602082019050818103600083015261385f8161328b565b9050919050565b6000602082019050818103600083015261387f816132ae565b9050919050565b6000602082019050818103600083015261389f816132d1565b9050919050565b600060208201905081810360008301526138bf816132f4565b9050919050565b600060208201905081810360008301526138df81613317565b9050919050565b600060208201905081810360008301526138ff8161333a565b9050919050565b6000602082019050818103600083015261391f8161335d565b9050919050565b6000602082019050818103600083015261393f81613380565b9050919050565b6000602082019050818103600083015261395f816133a3565b9050919050565b6000602082019050818103600083015261397f816133c6565b9050919050565b6000602082019050818103600083015261399f816133e9565b9050919050565b600060208201905081810360008301526139bf8161340c565b9050919050565b600060208201905081810360008301526139df8161342f565b9050919050565b600060208201905081810360008301526139ff81613452565b9050919050565b60006020820190508181036000830152613a1f81613475565b9050919050565b60006020820190508181036000830152613a3f81613498565b9050919050565b60006020820190508181036000830152613a5f816134bb565b9050919050565b60006020820190508181036000830152613a7f816134de565b9050919050565b60006020820190508181036000830152613a9f81613501565b9050919050565b60006020820190508181036000830152613abf81613524565b9050919050565b60006020820190508181036000830152613adf81613547565b9050919050565b60006020820190508181036000830152613aff8161356a565b9050919050565b60006020820190508181036000830152613b1f8161358d565b9050919050565b60006020820190508181036000830152613b3f816135b0565b9050919050565b60006020820190508181036000830152613b5f816135d3565b9050919050565b60006020820190508181036000830152613b7f8161363c565b9050919050565b60006020820190508181036000830152613ba08184613689565b905092915050565b6000602082019050613bbd60008301846136e8565b92915050565b6000613bcd613bde565b9050613bd98282613eda565b919050565b6000604051905090565b600067ffffffffffffffff821115613c0357613c02614041565b5b613c0c82614084565b9050602081019050919050565b600067ffffffffffffffff821115613c3457613c33614041565b5b613c3d82614084565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613cb482613e32565b9150613cbf83613e32565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613cf457613cf3613f85565b5b828201905092915050565b6000613d0a82613e32565b9150613d1583613e32565b925082613d2557613d24613fb4565b5b828204905092915050565b6000613d3b82613e32565b9150613d4683613e32565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613d7f57613d7e613f85565b5b828202905092915050565b6000613d9582613e32565b9150613da083613e32565b925082821015613db357613db2613f85565b5b828203905092915050565b6000613dc982613e12565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613e69578082015181840152602081019050613e4e565b83811115613e78576000848401525b50505050565b6000613e8982613e32565b91506000821415613e9d57613e9c613f85565b5b600182039050919050565b60006002820490506001821680613ec057607f821691505b60208210811415613ed457613ed3613fe3565b5b50919050565b613ee382614084565b810181811067ffffffffffffffff82111715613f0257613f01614041565b5b80604052505050565b6000613f1682613e32565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613f4957613f48613f85565b5b600182019050919050565b6000613f5f82613e32565b9150613f6a83613e32565b925082613f7a57613f79613fb4565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f47616e67737461436869636b7320616464726573732063616e6e6f742062652060008201527f3078300000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4950465320434944206d757374206e6f7420626520656d707479000000000000600082015250565b7f546f6b656e20616c72656164792068617320616e204950465320434944000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4f6e6c79206f776e65722063616e2061636365737320746f6b656e206d65746160008201527f6461746100000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f47616e67737461436869636b73206164647265737320646f6573206e6f74207360008201527f7570706f7274204947616e67737461436869636b7320696e7465726661636500602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4d696e74696e67207072696365206d757374206265206772656174657220746860008201527f616e203000000000000000000000000000000000000000000000000000000000602082015250565b7f4261736520746f6b656e20555249206d757374206e6f7420626520656d707479600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4d696e74696e6720707269636520697320686967686572207468616e2070726f60008201527f7669646564207061796d656e7400000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6147a081613dbe565b81146147ab57600080fd5b50565b6147b781613dd0565b81146147c257600080fd5b50565b6147ce81613ddc565b81146147d957600080fd5b50565b6147e581613de6565b81146147f057600080fd5b50565b6147fc81613e32565b811461480757600080fd5b5056fea264697066735822122083c2bec65d8e3ce33408fbc210ed006ad1170762674a83bbcc4a3a05cce2d6f664736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c806370a08231116100f7578063b88d4fde11610095578063d547741f11610064578063d547741f14610682578063d85d3d27146106ab578063e63ab1e9146106c7578063e985e9c5146106f2576101cd565b8063b88d4fde146105c8578063c87b56dd146105f1578063ce196aea1461062e578063d539139314610657576101cd565b806391d14854116100d157806391d148541461050c57806395d89b4114610549578063a217fddf14610574578063a22cb4651461059f576101cd565b806370a082311461048f5780638417b47f146104cc5780638456cb59146104f5576101cd565b806330176e131161016f5780635c975abb1161013e5780635c975abb146103c15780635e473128146103ec5780636352211e146104155780636914db6014610452576101cd565b806330176e131461032f57806336568abe146103585780633f4ba83a1461038157806342842e0e14610398576101cd565b8063095ea7b3116101ab578063095ea7b31461027757806323b872dd146102a0578063248a9ca3146102c95780632f2ff15d14610306576101cd565b806301ffc9a7146101d257806306fdde031461020f578063081812fc1461023a575b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f49190613063565b61072f565b60405161020691906137d3565b60405180910390f35b34801561021b57600080fd5b50610224610741565b6040516102319190613824565b60405180910390f35b34801561024657600080fd5b50610261600480360381019061025c9190613106565b6107d3565b60405161026e919061376c565b60405180910390f35b34801561028357600080fd5b5061029e60048036038101906102999190612f89565b610858565b005b3480156102ac57600080fd5b506102c760048036038101906102c29190612e17565b610970565b005b3480156102d557600080fd5b506102f060048036038101906102eb9190612ff6565b6109d0565b6040516102fd91906137ee565b60405180910390f35b34801561031257600080fd5b5061032d60048036038101906103289190613023565b6109f0565b005b34801561033b57600080fd5b50610356600480360381019061035191906130bd565b610a19565b005b34801561036457600080fd5b5061037f600480360381019061037a9190613023565b610a8d565b005b34801561038d57600080fd5b50610396610b10565b005b3480156103a457600080fd5b506103bf60048036038101906103ba9190612e17565b610b4d565b005b3480156103cd57600080fd5b506103d6610b6d565b6040516103e391906137d3565b60405180910390f35b3480156103f857600080fd5b50610413600480360381019061040e9190612f2d565b610b83565b005b34801561042157600080fd5b5061043c60048036038101906104379190613106565b610bc4565b604051610449919061376c565b60405180910390f35b34801561045e57600080fd5b5061047960048036038101906104749190613106565b610c76565b6040516104869190613b86565b60405180910390f35b34801561049b57600080fd5b506104b660048036038101906104b19190612daa565b610dea565b6040516104c39190613ba8565b60405180910390f35b3480156104d857600080fd5b506104f360048036038101906104ee9190613106565b610ea2565b005b34801561050157600080fd5b5061050a610f05565b005b34801561051857600080fd5b50610533600480360381019061052e9190613023565b610f42565b60405161054091906137d3565b60405180910390f35b34801561055557600080fd5b5061055e610fad565b60405161056b9190613824565b60405180910390f35b34801561058057600080fd5b5061058961103f565b60405161059691906137ee565b60405180910390f35b3480156105ab57600080fd5b506105c660048036038101906105c19190612eed565b611046565b005b3480156105d457600080fd5b506105ef60048036038101906105ea9190612e6a565b6111c7565b005b3480156105fd57600080fd5b5061061860048036038101906106139190613106565b611229565b6040516106259190613824565b60405180910390f35b34801561063a57600080fd5b5061065560048036038101906106509190612daa565b6112d0565b005b34801561066357600080fd5b5061066c611422565b60405161067991906137ee565b60405180910390f35b34801561068e57600080fd5b506106a960048036038101906106a49190613023565b611446565b005b6106c560048036038101906106c091906130bd565b61146f565b005b3480156106d357600080fd5b506106dc6114c8565b6040516106e991906137ee565b60405180910390f35b3480156106fe57600080fd5b5061071960048036038101906107149190612dd7565b6114ec565b60405161072691906137d3565b60405180910390f35b600061073a82611580565b9050919050565b60606001805461075090613ea8565b80601f016020809104026020016040519081016040528092919081815260200182805461077c90613ea8565b80156107c95780601f1061079e576101008083540402835291602001916107c9565b820191906000526020600020905b8154815290600101906020018083116107ac57829003601f168201915b5050505050905090565b60006107de82611592565b61081d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081490613aa6565b60405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061086382610bc4565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cb90613b26565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108f36115fe565b73ffffffffffffffffffffffffffffffffffffffff16148061092257506109218161091c6115fe565b6114ec565b5b610961576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610958906139e6565b60405180910390fd5b61096b8383611606565b505050565b61098161097b6115fe565b826116bf565b6109c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b790613b46565b60405180910390fd5b6109cb83838361179d565b505050565b600060076000838152602001908152602001600020600101549050919050565b6109f9826109d0565b610a0a81610a056115fe565b6119f9565b610a148383611a96565b505050565b6000801b610a2e81610a296115fe565b6119f9565b6000825111610a72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6990613a66565b60405180910390fd5b8160089080519060200190610a88929190612b44565b505050565b610a956115fe565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af990613b66565b60405180910390fd5b610b0c8282611b77565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610b4281610b3d6115fe565b6119f9565b610b4a611c59565b50565b610b68838383604051806020016040528060008152506111c7565b505050565b60008060009054906101000a900460ff16905090565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610bb581610bb06115fe565b6119f9565b610bbf8383611cfa565b505050565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6490613a26565b60405180910390fd5b80915050919050565b610c7e612bca565b610c8782610bc4565b73ffffffffffffffffffffffffffffffffffffffff16610ca56115fe565b73ffffffffffffffffffffffffffffffffffffffff1614610cfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf290613966565b60405180910390fd5b6040518060600160405280838152602001610d1584610bc4565b73ffffffffffffffffffffffffffffffffffffffff168152602001600b6000858152602001908152602001600020604051806020016040529081600082018054610d5e90613ea8565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8a90613ea8565b8015610dd75780601f10610dac57610100808354040283529160200191610dd7565b820191906000526020600020905b815481529060010190602001808311610dba57829003601f168201915b5050505050815250508152509050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5290613a06565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000801b610eb781610eb26115fe565b6119f9565b60008211610efa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef190613a46565b60405180910390fd5b816009819055505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610f3781610f326115fe565b6119f9565b610f3f611e0c565b50565b60006007600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b606060028054610fbc90613ea8565b80601f0160208091040260200160405190810160405280929190818152602001828054610fe890613ea8565b80156110355780601f1061100a57610100808354040283529160200191611035565b820191906000526020600020905b81548152906001019060200180831161101857829003601f168201915b5050505050905090565b6000801b81565b61104e6115fe565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b390613946565b60405180910390fd5b80600660006110c96115fe565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166111766115fe565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516111bb91906137d3565b60405180910390a35050565b6111d86111d26115fe565b836116bf565b611217576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120e90613b46565b60405180910390fd5b61122384848484611eae565b50505050565b606061123482611592565b611273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126a90613b06565b60405180910390fd5b600061127d611f0a565b9050600081511161129d57604051806020016040528060008152506112c8565b806112a784611f9c565b6040516020016112b892919061370e565b6040516020818303038152906040525b915050919050565b6000801b6112e5816112e06115fe565b6119f9565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611355576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134c90613886565b60405180910390fd5b61139e7f06786aaf000000000000000000000000000000000000000000000000000000008373ffffffffffffffffffffffffffffffffffffffff166120fd90919063ffffffff16565b6113dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d4906139c6565b60405180910390fd5b81600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61144f826109d0565b6114608161145b6115fe565b6119f9565b61146a8383611b77565b505050565b6009543410156114b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ab90613ac6565b60405180910390fd5b6114c56114bf6115fe565b82611cfa565b50565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600061158b82612122565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661167983610bc4565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006116ca82611592565b611709576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170090613986565b60405180910390fd5b600061171483610bc4565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061178357508373ffffffffffffffffffffffffffffffffffffffff1661176b846107d3565b73ffffffffffffffffffffffffffffffffffffffff16145b80611794575061179381856114ec565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166117bd82610bc4565b73ffffffffffffffffffffffffffffffffffffffff1614611813576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180a90613ae6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187a90613926565b60405180910390fd5b61188e838383612134565b611899600082611606565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118e99190613d8a565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119409190613ca9565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b611a038282610f42565b611a9257611a288173ffffffffffffffffffffffffffffffffffffffff16601461218c565b611a368360001c602061218c565b604051602001611a47929190613732565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a899190613824565b60405180910390fd5b5050565b611aa08282610f42565b611b735760016007600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611b186115fe565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611b818282610f42565b15611c555760006007600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611bfa6115fe565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b611c61610b6d565b611ca0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9790613866565b60405180910390fd5b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611ce36115fe565b604051611cf0919061376c565b60405180910390a1565b6000815111611d3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d35906138e6565b60405180910390fd5b6000611d4a600a6123c8565b90506000600b60008381526020019081526020016000206000018054611d6f90613ea8565b905014611db1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da890613906565b60405180910390fd5b611dbb83826123d6565b604051806020016040528083815250600b60008381526020019081526020016000206000820151816000019080519060200190611df9929190612b44565b50905050611e07600a6123f4565b505050565b611e14610b6d565b15611e54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4b906139a6565b60405180910390fd5b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611e976115fe565b604051611ea4919061376c565b60405180910390a1565b611eb984848461179d565b611ec58484848461240a565b611f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611efb906138a6565b60405180910390fd5b50505050565b606060088054611f1990613ea8565b80601f0160208091040260200160405190810160405280929190818152602001828054611f4590613ea8565b8015611f925780601f10611f6757610100808354040283529160200191611f92565b820191906000526020600020905b815481529060010190602001808311611f7557829003601f168201915b5050505050905090565b60606000821415611fe4576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506120f8565b600082905060005b60008214612016578080611fff90613f0b565b915050600a8261200f9190613cff565b9150611fec565b60008167ffffffffffffffff81111561203257612031614041565b5b6040519080825280601f01601f1916602001820160405280156120645781602001600182028036833780820191505090505b5090505b600085146120f15760018261207d9190613d8a565b9150600a8561208c9190613f54565b60306120989190613ca9565b60f81b8183815181106120ae576120ad614012565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856120ea9190613cff565b9450612068565b8093505050505b919050565b6000612108836125a1565b801561211a575061211983836125ee565b5b905092915050565b600061212d82612719565b9050919050565b61213c610b6d565b1561217c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612173906139a6565b60405180910390fd5b61218783838361272b565b505050565b60606000600283600261219f9190613d30565b6121a99190613ca9565b67ffffffffffffffff8111156121c2576121c1614041565b5b6040519080825280601f01601f1916602001820160405280156121f45781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061222c5761222b614012565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106122905761228f614012565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026122d09190613d30565b6122da9190613ca9565b90505b600181111561237a577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061231c5761231b614012565b5b1a60f81b82828151811061233357612332614012565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061237390613e7e565b90506122dd565b50600084146123be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b590613846565b60405180910390fd5b8091505092915050565b600081600001549050919050565b6123f0828260405180602001604052806000815250612730565b5050565b6001816000016000828254019250508190555050565b600061242b8473ffffffffffffffffffffffffffffffffffffffff1661278b565b15612594578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026124546115fe565b8786866040518563ffffffff1660e01b81526004016124769493929190613787565b602060405180830381600087803b15801561249057600080fd5b505af19250505080156124c157506040513d601f19601f820116820180604052508101906124be9190613090565b60015b612544573d80600081146124f1576040519150601f19603f3d011682016040523d82523d6000602084013e6124f6565b606091505b5060008151141561253c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612533906138a6565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612599565b600190505b949350505050565b60006125cd827f01ffc9a7000000000000000000000000000000000000000000000000000000006125ee565b80156125e757506125e58263ffffffff60e01b6125ee565b155b9050919050565b6000806301ffc9a760e01b8360405160240161260a9190613809565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000808573ffffffffffffffffffffffffffffffffffffffff166175308460405161269491906136f7565b6000604051808303818686fa925050503d80600081146126d0576040519150601f19603f3d011682016040523d82523d6000602084013e6126d5565b606091505b50915091506020815110156126f05760009350505050612713565b81801561270d57508080602001905181019061270c9190612fc9565b5b93505050505b92915050565b60006127248261279e565b9050919050565b505050565b61273a83836127b0565b612747600084848461240a565b612786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161277d906138a6565b60405180910390fd5b505050565b600080823b905060008111915050919050565b60006127a98261297e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612820576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281790613a86565b60405180910390fd5b61282981611592565b15612869576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612860906138c6565b60405180910390fd5b61287560008383612134565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546128c59190613ca9565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806129f157506129f0826129f8565b5b9050919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612ac357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612ad35750612ad282612ada565b5b9050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b828054612b5090613ea8565b90600052602060002090601f016020900481019282612b725760008555612bb9565b82601f10612b8b57805160ff1916838001178555612bb9565b82800160010185558215612bb9579182015b82811115612bb8578251825591602001919060010190612b9d565b5b509050612bc69190612c07565b5090565b604051806060016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001612c01612c24565b81525090565b5b80821115612c20576000816000905550600101612c08565b5090565b6040518060200160405280606081525090565b6000612c4a612c4584613be8565b613bc3565b905082815260208101848484011115612c6657612c65614075565b5b612c71848285613e3c565b509392505050565b6000612c8c612c8784613c19565b613bc3565b905082815260208101848484011115612ca857612ca7614075565b5b612cb3848285613e3c565b509392505050565b600081359050612cca81614797565b92915050565b600081359050612cdf816147ae565b92915050565b600081519050612cf4816147ae565b92915050565b600081359050612d09816147c5565b92915050565b600081359050612d1e816147dc565b92915050565b600081519050612d33816147dc565b92915050565b600082601f830112612d4e57612d4d614070565b5b8135612d5e848260208601612c37565b91505092915050565b600082601f830112612d7c57612d7b614070565b5b8135612d8c848260208601612c79565b91505092915050565b600081359050612da4816147f3565b92915050565b600060208284031215612dc057612dbf61407f565b5b6000612dce84828501612cbb565b91505092915050565b60008060408385031215612dee57612ded61407f565b5b6000612dfc85828601612cbb565b9250506020612e0d85828601612cbb565b9150509250929050565b600080600060608486031215612e3057612e2f61407f565b5b6000612e3e86828701612cbb565b9350506020612e4f86828701612cbb565b9250506040612e6086828701612d95565b9150509250925092565b60008060008060808587031215612e8457612e8361407f565b5b6000612e9287828801612cbb565b9450506020612ea387828801612cbb565b9350506040612eb487828801612d95565b925050606085013567ffffffffffffffff811115612ed557612ed461407a565b5b612ee187828801612d39565b91505092959194509250565b60008060408385031215612f0457612f0361407f565b5b6000612f1285828601612cbb565b9250506020612f2385828601612cd0565b9150509250929050565b60008060408385031215612f4457612f4361407f565b5b6000612f5285828601612cbb565b925050602083013567ffffffffffffffff811115612f7357612f7261407a565b5b612f7f85828601612d67565b9150509250929050565b60008060408385031215612fa057612f9f61407f565b5b6000612fae85828601612cbb565b9250506020612fbf85828601612d95565b9150509250929050565b600060208284031215612fdf57612fde61407f565b5b6000612fed84828501612ce5565b91505092915050565b60006020828403121561300c5761300b61407f565b5b600061301a84828501612cfa565b91505092915050565b6000806040838503121561303a5761303961407f565b5b600061304885828601612cfa565b925050602061305985828601612cbb565b9150509250929050565b6000602082840312156130795761307861407f565b5b600061308784828501612d0f565b91505092915050565b6000602082840312156130a6576130a561407f565b5b60006130b484828501612d24565b91505092915050565b6000602082840312156130d3576130d261407f565b5b600082013567ffffffffffffffff8111156130f1576130f061407a565b5b6130fd84828501612d67565b91505092915050565b60006020828403121561311c5761311b61407f565b5b600061312a84828501612d95565b91505092915050565b61313c81613dbe565b82525050565b61314b81613dbe565b82525050565b61315a81613dd0565b82525050565b61316981613ddc565b82525050565b61317881613de6565b82525050565b600061318982613c4a565b6131938185613c60565b93506131a3818560208601613e4b565b6131ac81614084565b840191505092915050565b60006131c282613c4a565b6131cc8185613c71565b93506131dc818560208601613e4b565b80840191505092915050565b60006131f382613c55565b6131fd8185613c7c565b935061320d818560208601613e4b565b61321681614084565b840191505092915050565b600061322c82613c55565b6132368185613c8d565b9350613246818560208601613e4b565b61324f81614084565b840191505092915050565b600061326582613c55565b61326f8185613c9e565b935061327f818560208601613e4b565b80840191505092915050565b6000613298602083613c8d565b91506132a382614095565b602082019050919050565b60006132bb601483613c8d565b91506132c6826140be565b602082019050919050565b60006132de602383613c8d565b91506132e9826140e7565b604082019050919050565b6000613301603283613c8d565b915061330c82614136565b604082019050919050565b6000613324601c83613c8d565b915061332f82614185565b602082019050919050565b6000613347601a83613c8d565b9150613352826141ae565b602082019050919050565b600061336a601d83613c8d565b9150613375826141d7565b602082019050919050565b600061338d602483613c8d565b915061339882614200565b604082019050919050565b60006133b0601983613c8d565b91506133bb8261424f565b602082019050919050565b60006133d3602483613c8d565b91506133de82614278565b604082019050919050565b60006133f6602c83613c8d565b9150613401826142c7565b604082019050919050565b6000613419601083613c8d565b915061342482614316565b602082019050919050565b600061343c603f83613c8d565b91506134478261433f565b604082019050919050565b600061345f603883613c8d565b915061346a8261438e565b604082019050919050565b6000613482602a83613c8d565b915061348d826143dd565b604082019050919050565b60006134a5602983613c8d565b91506134b08261442c565b604082019050919050565b60006134c8602483613c8d565b91506134d38261447b565b604082019050919050565b60006134eb602083613c8d565b91506134f6826144ca565b602082019050919050565b600061350e602083613c8d565b9150613519826144f3565b602082019050919050565b6000613531602c83613c8d565b915061353c8261451c565b604082019050919050565b6000613554602d83613c8d565b915061355f8261456b565b604082019050919050565b6000613577602983613c8d565b9150613582826145ba565b604082019050919050565b600061359a602f83613c8d565b91506135a582614609565b604082019050919050565b60006135bd602183613c8d565b91506135c882614658565b604082019050919050565b60006135e0603183613c8d565b91506135eb826146a7565b604082019050919050565b6000613603601783613c9e565b915061360e826146f6565b601782019050919050565b6000613626601183613c9e565b91506136318261471f565b601182019050919050565b6000613649602f83613c8d565b915061365482614748565b604082019050919050565b6000602083016000830151848203600086015261367c82826131e8565b9150508091505092915050565b60006060830160008301516136a160008601826136d9565b5060208301516136b46020860182613133565b50604083015184820360408601526136cc828261365f565b9150508091505092915050565b6136e281613e32565b82525050565b6136f181613e32565b82525050565b600061370382846131b7565b915081905092915050565b600061371a828561325a565b9150613726828461325a565b91508190509392505050565b600061373d826135f6565b9150613749828561325a565b915061375482613619565b9150613760828461325a565b91508190509392505050565b60006020820190506137816000830184613142565b92915050565b600060808201905061379c6000830187613142565b6137a96020830186613142565b6137b660408301856136e8565b81810360608301526137c8818461317e565b905095945050505050565b60006020820190506137e86000830184613151565b92915050565b60006020820190506138036000830184613160565b92915050565b600060208201905061381e600083018461316f565b92915050565b6000602082019050818103600083015261383e8184613221565b905092915050565b6000602082019050818103600083015261385f8161328b565b9050919050565b6000602082019050818103600083015261387f816132ae565b9050919050565b6000602082019050818103600083015261389f816132d1565b9050919050565b600060208201905081810360008301526138bf816132f4565b9050919050565b600060208201905081810360008301526138df81613317565b9050919050565b600060208201905081810360008301526138ff8161333a565b9050919050565b6000602082019050818103600083015261391f8161335d565b9050919050565b6000602082019050818103600083015261393f81613380565b9050919050565b6000602082019050818103600083015261395f816133a3565b9050919050565b6000602082019050818103600083015261397f816133c6565b9050919050565b6000602082019050818103600083015261399f816133e9565b9050919050565b600060208201905081810360008301526139bf8161340c565b9050919050565b600060208201905081810360008301526139df8161342f565b9050919050565b600060208201905081810360008301526139ff81613452565b9050919050565b60006020820190508181036000830152613a1f81613475565b9050919050565b60006020820190508181036000830152613a3f81613498565b9050919050565b60006020820190508181036000830152613a5f816134bb565b9050919050565b60006020820190508181036000830152613a7f816134de565b9050919050565b60006020820190508181036000830152613a9f81613501565b9050919050565b60006020820190508181036000830152613abf81613524565b9050919050565b60006020820190508181036000830152613adf81613547565b9050919050565b60006020820190508181036000830152613aff8161356a565b9050919050565b60006020820190508181036000830152613b1f8161358d565b9050919050565b60006020820190508181036000830152613b3f816135b0565b9050919050565b60006020820190508181036000830152613b5f816135d3565b9050919050565b60006020820190508181036000830152613b7f8161363c565b9050919050565b60006020820190508181036000830152613ba08184613689565b905092915050565b6000602082019050613bbd60008301846136e8565b92915050565b6000613bcd613bde565b9050613bd98282613eda565b919050565b6000604051905090565b600067ffffffffffffffff821115613c0357613c02614041565b5b613c0c82614084565b9050602081019050919050565b600067ffffffffffffffff821115613c3457613c33614041565b5b613c3d82614084565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613cb482613e32565b9150613cbf83613e32565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613cf457613cf3613f85565b5b828201905092915050565b6000613d0a82613e32565b9150613d1583613e32565b925082613d2557613d24613fb4565b5b828204905092915050565b6000613d3b82613e32565b9150613d4683613e32565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613d7f57613d7e613f85565b5b828202905092915050565b6000613d9582613e32565b9150613da083613e32565b925082821015613db357613db2613f85565b5b828203905092915050565b6000613dc982613e12565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613e69578082015181840152602081019050613e4e565b83811115613e78576000848401525b50505050565b6000613e8982613e32565b91506000821415613e9d57613e9c613f85565b5b600182039050919050565b60006002820490506001821680613ec057607f821691505b60208210811415613ed457613ed3613fe3565b5b50919050565b613ee382614084565b810181811067ffffffffffffffff82111715613f0257613f01614041565b5b80604052505050565b6000613f1682613e32565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613f4957613f48613f85565b5b600182019050919050565b6000613f5f82613e32565b9150613f6a83613e32565b925082613f7a57613f79613fb4565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f47616e67737461436869636b7320616464726573732063616e6e6f742062652060008201527f3078300000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4950465320434944206d757374206e6f7420626520656d707479000000000000600082015250565b7f546f6b656e20616c72656164792068617320616e204950465320434944000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4f6e6c79206f776e65722063616e2061636365737320746f6b656e206d65746160008201527f6461746100000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f47616e67737461436869636b73206164647265737320646f6573206e6f74207360008201527f7570706f7274204947616e67737461436869636b7320696e7465726661636500602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4d696e74696e67207072696365206d757374206265206772656174657220746860008201527f616e203000000000000000000000000000000000000000000000000000000000602082015250565b7f4261736520746f6b656e20555249206d757374206e6f7420626520656d707479600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4d696e74696e6720707269636520697320686967686572207468616e2070726f60008201527f7669646564207061796d656e7400000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6147a081613dbe565b81146147ab57600080fd5b50565b6147b781613dd0565b81146147c257600080fd5b50565b6147ce81613ddc565b81146147d957600080fd5b50565b6147e581613de6565b81146147f057600080fd5b50565b6147fc81613e32565b811461480757600080fd5b5056fea264697066735822122083c2bec65d8e3ce33408fbc210ed006ad1170762674a83bbcc4a3a05cce2d6f664736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 796,
        "contract": "contracts/GangstaEggs.sol:GangstaEggs",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 896,
        "contract": "contracts/GangstaEggs.sol:GangstaEggs",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 898,
        "contract": "contracts/GangstaEggs.sol:GangstaEggs",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 902,
        "contract": "contracts/GangstaEggs.sol:GangstaEggs",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 906,
        "contract": "contracts/GangstaEggs.sol:GangstaEggs",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 910,
        "contract": "contracts/GangstaEggs.sol:GangstaEggs",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 916,
        "contract": "contracts/GangstaEggs.sol:GangstaEggs",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 24,
        "contract": "contracts/GangstaEggs.sol:GangstaEggs",
        "label": "_roles",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 3444,
        "contract": "contracts/GangstaEggs.sol:GangstaEggs",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 3331,
        "contract": "contracts/GangstaEggs.sol:GangstaEggs",
        "label": "_mintingPrice",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3205,
        "contract": "contracts/GangstaEggs.sol:GangstaEggs",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Counter)2172_storage"
      },
      {
        "astId": 3221,
        "contract": "contracts/GangstaEggs.sol:GangstaEggs",
        "label": "_tokenMetadata",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(TokenMetadatum)3208_storage)"
      },
      {
        "astId": 3080,
        "contract": "contracts/GangstaEggs.sol:GangstaEggs",
        "label": "gangstaChicks",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(GangstaChicks)3066"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(GangstaChicks)3066": {
        "encoding": "inplace",
        "label": "contract GangstaChicks",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenMetadatum)3208_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Mintable.TokenMetadatum)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenMetadatum)3208_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2172_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2171,
            "contract": "contracts/GangstaEggs.sol:GangstaEggs",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/GangstaEggs.sol:GangstaEggs",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/GangstaEggs.sol:GangstaEggs",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenMetadatum)3208_storage": {
        "encoding": "inplace",
        "label": "struct Mintable.TokenMetadatum",
        "members": [
          {
            "astId": 3207,
            "contract": "contracts/GangstaEggs.sol:GangstaEggs",
            "label": "ipfsCid",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}